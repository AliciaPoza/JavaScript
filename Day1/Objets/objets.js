//? synthawe { unePropriete:uneValeur}
//? dans un objet on assigne avec : plut√¥t qu'avec =
let user = {
    id:3657826,
    'name':'Seagal',
    firstName:'Steven',
    badges: [`üìΩ`,`üëÆ`, `üé∏`,`üëò`, `üé§`] 
};
console.log(user);
// On peut acc√©der aux propri√©t√©s d'un objet avec la notation en point
console.log(user.name);
console.log(user.id);
// Ou avec la notation en tableau associatif
console.log(user[`id`]);
// On peut supprimer une propri√©t√©
//? delete user.badges;
// On peut ajouter simplement des propri√©t√©s dans un objet avec une assignation de valeur
// Si on assigne √† une propri√©t√© d√©j√† existante cela √©crase la valeur
// Mais si on assigne √† une propri√©t√© non existante cela cr√©e la propri√©t√©
user.dps = 9999;
// Une fonction native de JS pour conna√Ætre les propri√©t√©s d'un objet, hasOwnProperty()
let menuDuJour={
    entree:`Bassine d'Aioli`,
    plat:`Rat Adulte`,
    dessert:`√éle Fidji`
};
console.log(menuDuJour);
console.log(menuDuJour.hasOwnProperty(`entree`));
//! EXERCICE OBJECTS
//TODO : Faire l'exercice avec le User et les passions en mode objet
//TODO : (un objet user avec des propri√©t√©s pour le nom age et passions qui est lui aussi un objet avec 
//TODO 2 propri√©t√©s)
let userObjet={
    nom: `Pingu Le Ping`,
    age: 11,
    passions: {
        passion1: `p√©cher des poissons`,
        passion2: `bouder`
    }
};
console.log(`Nom de l'utilisateur: `+userObjet.nom);
console.log(`√Çge de l'utilisateur: `+userObjet.age);
console.log(`Mes passions: `+ userObjet.passions.passion1 + ` et ` + userObjet.passions.passion2);